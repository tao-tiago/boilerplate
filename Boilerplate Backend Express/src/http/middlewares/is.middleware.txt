import { Request, Response, NextFunction } from "express"
import { PrismaClient } from "@prisma/client"
import { container } from "tsyringe"

// Services
import { RecordService } from "../services/record/record.service"
import { Warning } from "../errors"

type Roles = "ADMIN" | "_BENEFICIARY" | "_ORDER" | "_VOUCHER"

export const is = (roles: Roles[]) => {

  return async (request: Request, response: Response, next: NextFunction) => {

    const prisma = new PrismaClient()

    if (roles.length === 0) {
      throw new Error("Nenhuma permissão foi declarada, insira pelo menos uma permissão!")
    }

    // Instância o serviço de cadastro
    const recordService = container.resolve(RecordService)

    // Separa as permissões genéricas
    const genericRoles = roles.filter(role => role.startsWith("_"))

    // Guarda os parâmetros do cabeçalho
    const personId = request.headers.personId as string
    const profiles = JSON.parse(request.headers.profiles as string)

    // Guarda os parâmetros da rota
    const routeBeneficiaryId = request.params.beneficiaryId
    const routeOrderId = request.params.orderId
    const routeVoucherId = request.params.voucherId

    // Checa se o usuário é ADMIN
    const isAdmin = profiles.some((profile: { id: string, name: Roles }) => profile.name === "ADMIN")
    const isOnlyAdmin = roles.every((role: Roles) => role === "ADMIN")

    if (isAdmin) {
      return next()
    }

    if (isOnlyAdmin && !isAdmin) {
      return response.status(403).json({ message: "Usuário não autorizado!" })
    }

    // Checa se o usuário tem permissão de acessar a rota por beneficiário
    if (genericRoles.some((role: Roles) => role === "_BENEFICIARY")) {

      const person = await recordService.getBeneficiariesByPerson(personId)

      if ("message" in person && "code" in person) {
        throw new Warning(person.message, person.code)
      }

      if (person.beneficiaries.some((beneficiary) => beneficiary.id === routeBeneficiaryId)) {
        return next()
      }
    }

    // Checa se o usuário tem permissão de acessar as rotas de pedido
    if (genericRoles.some((role: Roles) => role === "_ORDER")) {

      const person = await recordService.getBeneficiariesByPerson(personId)

      if ("message" in person && "code" in person) {
        throw new Warning(person.message, person.code)
      }

      const customer = await prisma.customer.findMany({
        where: {
          orders: {
            every: {
              id: routeOrderId
            }
          }
        }
      })

      if (customer.some((customer) =>
        person.beneficiaries.some(beneficiary => beneficiary.id === customer.beneficiaryId)
      )) { return next() }
    }

    // Checa se o usuário tem permissão de acessar as rotas de voucher
    if (genericRoles.some((role: Roles) => role === "_VOUCHER")) {

      const person = await recordService.getBeneficiariesByPerson(personId)

      if ("message" in person && "code" in person) {
        throw new Warning(person.message, person.code)
      }

      const customer = await prisma.customer.findMany({
        where: {
          orders: {
            every: {
              voucher: {
                every: {
                  id: routeVoucherId
                }
              }
            }
          }
        }
      })

      if (customer.some((customer) =>
        person.beneficiaries.some(beneficiary => beneficiary.id === customer.beneficiaryId)
      )) { return next() }
    }

    return response.status(403).json({ message: "Usuário não autorizado!" })
  }
}
